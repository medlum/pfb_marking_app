import zipfile
from pathlib import Path
from charset_normalizer import from_path
import shutil
import subprocess
import os
import re
import pandas as pd
import streamlit as st
def extract_and_read_files(zip_path):
    # Define extraction path
    #extract_folder = f"extracted_pyfiles"
    extract_folder = st.session_state.user_id

        # Clear previous data
    if Path(extract_folder).exists():
        shutil.rmtree(extract_folder)

    # Extract ZIP file
    with zipfile.ZipFile(zip_path, "r") as zip_ref:
            zip_ref.extractall(extract_folder)

    extracted_data = {}

    for folder in Path(extract_folder).iterdir(): 

        if folder.is_dir():  

            # extract student name from the each subfolder
            # which contains name as standard label from brightspace 
            folder_name = str(folder.relative_to(extract_folder))
            cleaned_text = re.sub(r"\b(BA|NP|PM|AM)\b", "", folder_name)
            cleaned_text = re.sub(r"\s+", " ", cleaned_text).strip()
            student_name = " ".join(re.findall(r"\b[A-Z]+\b", cleaned_text))
            
            shutil.copy('./data/SpaceUsage.csv', folder)

            main_error_flag = True
            
            for py_file in folder.glob("*.py"):  
                main_error_flag = False 
                try:
                    result = from_path(py_file)
                    encoding = result.best().encoding if result.best() else "utf-8"
                    with open(py_file, "r", encoding=encoding) as f:
                        student_report = f.read()

                except Exception:
                    encoding = "utf-8"  # Fallback

                if folder_name not in extracted_data:
                    extracted_data[folder_name] = {}

                extracted_data[folder_name]["student name"] = student_name
                extracted_data[folder_name]["python file"] = student_report

                original_cwd = os.getcwd()  

                try:
                    # set up an error flag and use subprocess to run python code   

                    os.chdir(py_file.parent)
                    subprocess.run(['python3', py_file.name], check=True)
                
                except Exception as e:
                    # raise an error if there are errors running python code and set error flag to True
                    st.error(f"*Error with {py_file.name} for {student_name}*.")
                    main_error_flag = True
                
                finally:
                #  Change back to the original working directory
                   os.chdir(original_cwd)

            # Read the text file generated by the python code if error flag it False
            if not main_error_flag:
                for file in folder.glob("*.txt"):
                    if 'summary' in file.stem.lower():
                        #print(f"summary-related file found: {file}")
                        with open(file, "r", encoding="utf-8") as f:
                            extracted_data[folder_name]["summary"] = f.read()
                #else:
                #    st.warning(f"Unable to generate summary reports to due error with {py_file.name} for {student_name} , check source code")
    return extracted_data
         
#
#extracted_contents = extract_and_read_files('PFB Individual Project Sample.zip')

#for folder, contents in extracted_contents.items():
#    #if contents["student name"]:
#
#    print(f"Mark this assignment for student name:\n{contents["student name"]}.")
#    print(f"This is the submitted python code:\n{contents["python file"]}")    
#    print(f"This is output generated from the python code:\n{contents['summary']}")   



def process_data(data):
    df = pd.DataFrame(data)

    df['Program Correctness'] = (
        df.get('Output for FantaxySky Drone Air Show Summary', 0) + 
        df.get('Output for Top 5 of 10 programs', 0)
    )

    df['Total'] = (
        df['Program Correctness'] + 
        df.get('Code Readability', 0) + 
        df.get('Code Efficiency', 0) + 
        df.get('Documentation', 0) + 
        df.get('Assignment Specifications', 0)
    )

    cols = [
        'Student Name', 
        'Program Correctness', 
        'Code Readability', 
        'Code Efficiency', 
        'Documentation', 
        'Assignment Specifications', 
        'Total', 
        'Feedback'
    ]

    existing_cols = [col for col in cols if col in df.columns]
    return df[existing_cols]


# custom CSS for buttons
btn_css = """
<style>
    .stButton > button {
        color: #383736; 
        border: none; /* No border */
        padding: 5px 22px; /* Reduced top and bottom padding */
        text-align: center; /* Centered text */
        text-decoration: none; /* No underline */
        display: inline-block; /* Inline-block */
        font-size: 8px !important;
        margin: 4px 2px; /* Some margin */
        cursor: pointer; /* Pointer cursor on hover */
        border-radius: 30px; /* Rounded corners */
        transition: background-color 0.3s; /* Smooth background transition */
    }
    .stButton > button:hover {
        color: #383736; 
        background-color: #c4c2c0; /* Darker green on hover */
    }
</style>
"""

image_css = """
<style>
.stImage img {
    border-radius: 50%;
    #border: 5px solid #f8fae6;
}
</style>

"""


